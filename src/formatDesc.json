//observer meta
{
  a : function(newValue, oldValue){},
  b : [
    function(newValue, oldValue){},
    ...
  ], //can be array
  c : [
    function(newValue, oldValue){},
    {
      c_1 : function(newValue, oldValue)
    }
  ],
  d : {
    _value : function(newArray, oldArray){}, //array assign(common path observer)
    _item : {
      _value : function(newItem, oldItem){}, //for array item assigned(by index),
      _splice: function(splices){}, //for splice
      d_1 : function(newValue, oldValue){}
    }
  }
} ==> {
  a : {
    _value : [function(newValue, oldValue){}]
  }
  b : {
    _value : [
      function(newValue, oldValue){},
      ...
    ]
  }, //can be array
  c : {
    _value : [function(newValue, oldValue){}],
    c_1 : {
      _value : [function(newValue, oldValue){}]
    }
  },
  d : {
    _value : [function(newArray, oldArray){}], //array assign(common path observer)
    _item : {
      _value : [function(newItem, oldItem){}], //array item assigned(by index),
      _splice: [function(splices){}], //for splice
      d_1 : {
        _value : [function(newValue, oldValue){}]
    }
  }
} ==> {
  _meta_type : "_root",
  _meta_id : "", //generated or specified
  _value : [], //must be array
  _prop : { //must be normal object
    _meta_type : "_prop",
    a : {
      _meta_type : "_root",
      _meta_id : "", //specified or extended from parent
      _value : [
        {
          _meta_type : "_value", 
          _target_path: "a",
          _on_change: function(newValue, oldValue){},
          _register_on_change: function(){}, //default built-in, can be overridden
          _post_register: undefined //can be specified
        }
      ]
    }
    b : {
      _meta_type : "_root",
      _value : [
        {
          _meta_type: "_value",
          _on_change: function(newValue, oldValue){},
          _register_on_change: function(){},
          _post_register: undefined
        }
        ...
      ]
    }, //can be array
    c : {
      _meta_type : "_root",
      _value : [
        {
          _meta_type: "_value",
          _on_change: function(newValue, oldValue){},
          _register_on_change: function(){},
          _post_register: undefined
        }
        ...
      ],
      _prop : {
        _meta_type : "_prop",
        c_1 : {
          _meta_type : "_root",
          _value : [
            {
              _meta_type: "_value",
              _on_change: function(newValue, oldValue){},
              _register_on_change: function(){},
              _post_register: undefined
            }
          ]
        }
      }
    },
    d : {
      _meta_type : "_root",
      _value : [
        {
          _meta_type: "_value",
          _on_change: function(newArray, oldArray){},
          _register_on_change: function(){},
          _post_register: undefined
        },
        
        //_item can be treated as single binding in _value array or
        //be treated as a part of existing _value binding
        {
          _meta_type: "_value",
          _item : {
            _meta_type: "_root",
            _target_path: "d[?]", // ? will be replaced by real index at runtime
            _value : [
              {
                _meta_type: "_value",
                _on_change: function(newItem, oldItem){},
                _register_on_change: function(){},
                _post_register: undefined
              }
            ],
            _splice : [
              {
                _meta_type: "_splice",
                _on_change: function(splices){},
                _register_on_change: function(){},
                _post_register: undefined
              }
            ],
            _prop:{
              d_1 : {
                meta_type : "_root",
                _value : [
                  {
                    _meta_type: "_value",
                    _on_change: function(newArray, oldArray){},
                    _register_on_change: function(){},
                    _post_register: undefined
                  }
                ],
                _prop:{
                  _meta_type: "_prop",
                }
              }
            }
          }
        }
      ], //array assign(common path observer)
      _prop: {
        _meta_type: "_prop",
      }
    }
  }
}

//basic binding
"#x-xxx" ==> {
  _selector: "#x-xxx",
  _render: function(){},
  _assign: function(){},
  _register_render: function(){},
  _register_assign: function(){},
  
  a : "",
  b : ""
  
} ==>  {
  _meta_type : "_root",
  _meta_id : "", //optional

  _value: {
    _meta_type: "_value"
    _selector: "",
    _render: function(){},
    _assign: function(){},
    _register_render: function(){},
    _register_assign: function(){}
  },
  
  _prop: {
    _meta_type : "_prop"
    a : {
      _meta_type : "_root"
      ...
    },
    b : {
      _meta_type : "_root"
      ...
    },
  }
}  


//recursive fields binding 
{
  propa:{
    _selector: ""
  },
  propb:{
    _value: {
      _selector: ""
    }
    subofb:{
      _selector:""
    }
  }
} ==> {
  _meta_type: "_root",
  _prop:{
    _meta_type: "_prop"
    propa:{
      _value :{
        _selector: ""
      }
    },
    propb:{
      _meta_type: "_root"
      _value: {
        _meta_type: "_value"
        _selector: ""
      },
      _prop:{
        subofb:{
          _meta_type: "_root"
          _value:{
            _selector:""
          }
        }
      }//_prop
    }// propb 
  }// _prop
}



//array binding
{
  _duplicator: ""
  _item:{
    _selector : "",
    _index: "" 
    a: {},
    b: {}
  },
  length : ""
}  ==>  {
  _meta_type: "_root"
  _value:{ // the array itself
    _meta_type: "_value"
    _duplicator: ""
    _item : { // the element of the array
      _meta_type: "_root",
      // if stored, the index change can be watched, but this would be supported later, not now
      _store_index: false, 
      _value:{
        _meta_type: "_value",
        _target_path: "xxx[?]", // ? will be replaced by real index at runtime
        _selector : ""
      },
      _prop: {
        _meta_type: "_prop",
        // NOTE: the index can be rendered even not stored, maybe we need to clarify it more.
        _index: {},
        a: {},
        b: {}
      }
    },
  },
  _prop : {
    _meta_type : "_prop"
    length : ""
  }
} 



//attr operations(1-way only),@> to suggest an operation of attribution

border: "#target-table@>[border=]",  //assign value to the target attribution
width: "#target-table@>[style:width=]", //assign value to the target style property
color: "#target-table@>[class:(blue|red)?]", // switch the class in declared list by given value(must contained in the list)
height: "#target-table@>[class:height40?]",  // add/remove target class by given value(treated as boolean)
checked: "#check-box@>[checked?]" // add/remove target attribution by given value(treated as boolean)

"#target-table@>[border=]" ==> {
  _selector: "#target-table",
  _attr_op: "[border=]"
} => {
  _selector: "#target-table",
  _render: function(){...}, //default implementaion
  _assign: function(){}, //should be empty
  _register_render: function(){...}, //default implementation
  _register_assign: function(){}, //should be empty
}
  

// form element 2w binding
{
  name: {
    _form: {} // name can be ignored , the leaf property name will be treated as name of form element
  }
} ==>
{
  name: {
    _form: "name",
    _single_check: true/false //optional for single checkbox/radio without option list. default false.
  }
} ==> {
  name: {
    _form:{
      _name: "name",
      _default_change_event: "blur", //set to null to disable default change event
      _extra_change_events: ["keyup"] //optional, default is undefined
      _option: undefined // for building option list
    }
  }
} == > {
  _selector: "[name=name]",
  _render: function(){},
  _assign: function(){},
  _register_render: function(){},
  _register_assign: function(){},
  
}


//form option bind
_option: Aj.optionBind($scope.dataOption,"bloodTypes")  ==>
{
  bloodTypes: {}
} ==> {
  bloodTypes: {
    _duplicator: "", // if necessary
    _value: function(v){return v;},
    _text: function(v){return v}
  }
} ==> {
  bloodTypes: {
    _item: {
      _value: function(v){return v;},
      _text: function(v){return v}
    }
  }
} ==> { // in this step, it will be treated as normal array binding
  bloodTypes: {
    _duplicator: "",
    _item: {
      _selector: "",
      _render: function(){ (_value, _text) }, // _value, _text will be used as default rendering
      _assign: function(){}, //should do nothing
      _register_render: function(){},
      _register_assign: function(){}, //should do nothing
    }
  }
}

//select optgroup support(we will support it in furture)
_option: Aj.optionBind($scope.dataOption,{
  bloodTypes: {
    groupName: {
      _group_label: {}
    },
    list:{
      _sub_option: {},
    }
  }
}) ==> {
  bloodTypes: {
    groupName: {
      _group_label: {
        _label: function(v){return v;}
      }
    },
    list: {
      _sub_option:{
        _value: function(v){return v;},
        _text: function(v){return v}
      }
    }
  }
} ==> { // in this step, it will be treated as normal array binding
  bloodTypes: {
    _duplicator: "optgroup",
    _item: {
      groupName:{
        _selector: "optgroup@>[label=]",
        _render: function(){}, // default attr op render
        _assign: function(){}, //should do nothing
        _register_render: function(){}, //
        _register_assign: function(){}, //should do nothing,
      },
      list: {
        _duplicator: "option"
        _item: {
          _selector: "option",
          _render: function(){ (_value, _text) }, // _value, _text will be used as default rendering
          _assign: function(){}, //should do nothing
          _register_render: function(){},
          _register_assign: function(){}, //should do nothing,
        }
      }
    }
  }
}



//watch same/lower layer field
{
  _selector: "",
  _watch: {
    _fields: ["a", "b"],
    //optional, default is false, the calculated value will be stored implicitly rather 
    //than being exposed as a property; true will add a property to the holder object.
    _store: true/false,
    //optional, can be ignored, default will pass the new array value 
    //as calculated value
    _cal: function(a, b){
      return a+b;
    }
  }
}  ==> {
  _selector: "#x-xxx",
  _render: function(){
    //default by selector
  },
  _assign: function(){
    //assign to current object or internal map
  },
  _register_render: function(){
    //observer what?
  },
  _register_assign: function(){
    //observer _watch._fields
    //get value by _watch._cal
  },
}

//watch full path from scope
{
  _selector: "",
  _watch: {
    _fields: ["@:data.a", "@:data.b"],
    _cal: function(a, b){
      return a + b;
    }
  }
} 